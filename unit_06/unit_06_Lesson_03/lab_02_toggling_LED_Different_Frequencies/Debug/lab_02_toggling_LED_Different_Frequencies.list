
lab_02_toggling_LED_Different_Frequencies.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  4 .ARM          00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800038c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800038c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002d5  00000000  00000000  000103b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b8  00000000  00000000  0001068a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000a9b  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000112  00000000  00000000  0001125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002f63  00000000  00000000  0001136d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000142d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001434c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800036c 	.word	0x0800036c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800036c 	.word	0x0800036c

08000170 <main>:
#define GPIO_ODR_ADDRESS		(GPIO_BASE_ADDRESS + 0x0C)
#define RCC_APB2ENR_ADDRESS		(RCC_BASE_ADDRESS + 0x18)
#define RCC_CR_ADDRESS			(RCC_BASE_ADDRESS + 0x00)
#define RCC_CFGR_ADDRESS		(RCC_BASE_ADDRESS + 0x04)
int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
	unsigned long i;
	volatile R_general_Register_t* RCC_APB2ENR = (volatile R_general_Register_t*)RCC_APB2ENR_ADDRESS;
 8000176:	4b51      	ldr	r3, [pc, #324]	; (80002bc <main+0x14c>)
 8000178:	613b      	str	r3, [r7, #16]
	volatile R_general_Register_t* GPIO_CRH = (volatile R_general_Register_t*)GPIO_CRH_ADDRESS;
 800017a:	4b51      	ldr	r3, [pc, #324]	; (80002c0 <main+0x150>)
 800017c:	60fb      	str	r3, [r7, #12]
	volatile R_general_Register_t* GPIO_ODR = (volatile R_general_Register_t*)GPIO_ODR_ADDRESS;
 800017e:	4b51      	ldr	r3, [pc, #324]	; (80002c4 <main+0x154>)
 8000180:	60bb      	str	r3, [r7, #8]
	volatile R_general_Register_t* RCC_CR = (volatile R_general_Register_t*)RCC_CR_ADDRESS;
 8000182:	4b51      	ldr	r3, [pc, #324]	; (80002c8 <main+0x158>)
 8000184:	607b      	str	r3, [r7, #4]
	volatile R_general_Register_t* RCC_CFGR = (volatile R_general_Register_t*)RCC_CFGR_ADDRESS;
 8000186:	4b51      	ldr	r3, [pc, #324]	; (80002cc <main+0x15c>)
 8000188:	603b      	str	r3, [r7, #0]
	//  mode or in case of failure of the external 3-25 MHz oscillator used directly or indirectly as
	//  system clock. This bit can not be cleared if the internal 8 MHz RC is used directly or
	//  indirectly as system clock or is selected to become the system clock.
	//  0: Internal 8 MHz RC oscillator OFF
	//  1: Internal 8 MHz RC oscillator ON
	RCC_CR ->bit_0 = 1; // HSI is enabled
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	6813      	ldr	r3, [r2, #0]
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6013      	str	r3, [r2, #0]
	for(i=0; i<5; i++);
 8000194:	2300      	movs	r3, #0
 8000196:	617b      	str	r3, [r7, #20]
 8000198:	e002      	b.n	80001a0 <main+0x30>
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	3301      	adds	r3, #1
 800019e:	617b      	str	r3, [r7, #20]
 80001a0:	697b      	ldr	r3, [r7, #20]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	d9f9      	bls.n	800019a <main+0x2a>
	//  enabled).
	//  00: HSI selected as system clock
	//  01: HSE selected as system clock
	//  10: PLL selected as system clock
	//  11: Not allowed
	RCC_CFGR ->bit_0 = 0;
 80001a6:	683a      	ldr	r2, [r7, #0]
 80001a8:	6813      	ldr	r3, [r2, #0]
 80001aa:	f36f 0300 	bfc	r3, #0, #1
 80001ae:	6013      	str	r3, [r2, #0]
	RCC_CFGR ->bit_1 = 0; //HSI is selected as system clock
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	6813      	ldr	r3, [r2, #0]
 80001b4:	f36f 0341 	bfc	r3, #1, #1
 80001b8:	6013      	str	r3, [r2, #0]
	//	1011: SYSCLK divided by 16
	//	1100: SYSCLK divided by 64
	//	1101: SYSCLK divided by 128
	//	1110: SYSCLK divided by 256
	//	1111: SYSCLK divided by 512
	RCC_CFGR ->bit_4 = 0;
 80001ba:	683a      	ldr	r2, [r7, #0]
 80001bc:	6813      	ldr	r3, [r2, #0]
 80001be:	f36f 1304 	bfc	r3, #4, #1
 80001c2:	6013      	str	r3, [r2, #0]
	RCC_CFGR ->bit_5 = 0;
 80001c4:	683a      	ldr	r2, [r7, #0]
 80001c6:	6813      	ldr	r3, [r2, #0]
 80001c8:	f36f 1345 	bfc	r3, #5, #1
 80001cc:	6013      	str	r3, [r2, #0]
	RCC_CFGR ->bit_6 = 0;
 80001ce:	683a      	ldr	r2, [r7, #0]
 80001d0:	6813      	ldr	r3, [r2, #0]
 80001d2:	f36f 1386 	bfc	r3, #6, #1
 80001d6:	6013      	str	r3, [r2, #0]
	RCC_CFGR ->bit_7 = 0; //AHB prescaler is not devided
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	6813      	ldr	r3, [r2, #0]
 80001dc:	f36f 13c7 	bfc	r3, #7, #1
 80001e0:	6013      	str	r3, [r2, #0]
	//	0xx: HCLK not divided
	//	100: HCLK divided by 2
	//	101: HCLK divided by 4
	//	110: HCLK divided by 8
	//	111: HCLK divided by 16
	RCC_CFGR->bit_8 = 0;
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f36f 2308 	bfc	r3, #8, #1
 80001ea:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_9 = 0;
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	6813      	ldr	r3, [r2, #0]
 80001f0:	f36f 2349 	bfc	r3, #9, #1
 80001f4:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_10 = 1;//APB2 prescaler is devided by 2;
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fe:	6013      	str	r3, [r2, #0]
	//	0xx: HCLK not divided
	//	100: HCLK divided by 2
	//	101: HCLK divided by 4
	//	110: HCLK divided by 8
	//	111: HCLK divided by 16
	RCC_CFGR->bit_11 = 1;
 8000200:	683a      	ldr	r2, [r7, #0]
 8000202:	6813      	ldr	r3, [r2, #0]
 8000204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000208:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_12 = 0;
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	6813      	ldr	r3, [r2, #0]
 800020e:	f36f 330c 	bfc	r3, #12, #1
 8000212:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_13 = 1;
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800021c:	6013      	str	r3, [r2, #0]

	//Bit 2 IOPAEN: I/O port A clock enable
	//Set and cleared by software.
	//0: I/O port A clock disabled
	//1:I/O port A clock enabled
	RCC_APB2ENR -> bit_2 = 1;
 800021e:	693a      	ldr	r2, [r7, #16]
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]
	//	1011: PLL3 clock selected (for Ethernet)
	//	Note: This clock output may have some truncated cycles at startup or during MCO clock source
	//	switching.
	//	The selected clock to output onto the MCO pin must not exceed 50 MHz (the maximum I/O
	//	speed)
	RCC_CFGR->bit_24 = 1;
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	6813      	ldr	r3, [r2, #0]
 800022c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000230:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_25 = 0;
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	6813      	ldr	r3, [r2, #0]
 8000236:	f36f 6359 	bfc	r3, #25, #1
 800023a:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_26 = 1;
 800023c:	683a      	ldr	r2, [r7, #0]
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000244:	6013      	str	r3, [r2, #0]
	RCC_CFGR->bit_27 = 0; //MCO's output is system clock selected
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f36f 63db 	bfc	r3, #27, #1
 800024e:	6013      	str	r3, [r2, #0]

	//write 0x2 on bit 20;
	GPIO_CRH->bit_20 =0;
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	6813      	ldr	r3, [r2, #0]
 8000254:	f36f 5314 	bfc	r3, #20, #1
 8000258:	6013      	str	r3, [r2, #0]
	GPIO_CRH->bit_21 =1;
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	6813      	ldr	r3, [r2, #0]
 800025e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000262:	6013      	str	r3, [r2, #0]
	GPIO_CRH->bit_22 =0;
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	f36f 5396 	bfc	r3, #22, #1
 800026c:	6013      	str	r3, [r2, #0]
	GPIO_CRH->bit_23 =0;
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f36f 53d7 	bfc	r3, #23, #1
 8000276:	6013      	str	r3, [r2, #0]
	while(1)
	{
		//making pin set
		GPIO_ODR->bit_13 = 1;
 8000278:	68ba      	ldr	r2, [r7, #8]
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000280:	6013      	str	r3, [r2, #0]
		for(i = 0; i<50000; i++);
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	e002      	b.n	800028e <main+0x11e>
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	3301      	adds	r3, #1
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000294:	4293      	cmp	r3, r2
 8000296:	d9f7      	bls.n	8000288 <main+0x118>
		GPIO_ODR->bit_13 = 0;
 8000298:	68ba      	ldr	r2, [r7, #8]
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	f36f 334d 	bfc	r3, #13, #1
 80002a0:	6013      	str	r3, [r2, #0]
		for(i = 0; i<50000; i++);
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e002      	b.n	80002ae <main+0x13e>
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	3301      	adds	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d9f7      	bls.n	80002a8 <main+0x138>
		GPIO_ODR->bit_13 = 1;
 80002b8:	e7de      	b.n	8000278 <main+0x108>
 80002ba:	bf00      	nop
 80002bc:	40021018 	.word	0x40021018
 80002c0:	40010804 	.word	0x40010804
 80002c4:	4001080c 	.word	0x4001080c
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40021004 	.word	0x40021004

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ff35 	bl	8000170 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	2500      	movs	r5, #0
 8000328:	4e0c      	ldr	r6, [pc, #48]	; (800035c <__libc_init_array+0x38>)
 800032a:	4c0d      	ldr	r4, [pc, #52]	; (8000360 <__libc_init_array+0x3c>)
 800032c:	1ba4      	subs	r4, r4, r6
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	42a5      	cmp	r5, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	f000 f81a 	bl	800036c <_init>
 8000338:	2500      	movs	r5, #0
 800033a:	4e0a      	ldr	r6, [pc, #40]	; (8000364 <__libc_init_array+0x40>)
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <__libc_init_array+0x44>)
 800033e:	1ba4      	subs	r4, r4, r6
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	42a5      	cmp	r5, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800034c:	4798      	blx	r3
 800034e:	3501      	adds	r5, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000356:	4798      	blx	r3
 8000358:	3501      	adds	r5, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
