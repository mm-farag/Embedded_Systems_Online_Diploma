
lab_03_toggling_LED_Different_Frequencies.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800031c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800031c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000008c  00000000  00000000  00010345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000007b  00000000  00000000  000103d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000000fa  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000017e  00000000  00000000  000105c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00010740  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000058  00000000  00000000  000107bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002fc 	.word	0x080002fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002fc 	.word	0x080002fc

08000170 <main>:
#define GPIO_ODR_REGISTER		*(vuint32_t*)(GPIO_BASE_ADDRESS + 0x0C)
#define RCC_APB2ENR_REGISTER	*(vuint32_t*)(RCC_BASE_ADDRESS + 0x18)
#define RCC_CR_REGISTER			*(vuint32_t*)(RCC_BASE_ADDRESS + 0x00)
#define RCC_CFGR_REGISTER		*(vuint32_t*)(RCC_BASE_ADDRESS + 0x04)
int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
//	Bit 16 PLLSRC: PLL entry clock source
//	Set and cleared by software to select PLL clock source. This bit can be written only when
//	PLL is disabled.
//	0: HSI oscillator clock / 2 selected as PLL input clock
//	1: HSE oscillator clock selected as PLL input clock
	RCC_CFGR_REGISTER &= ~(1<<16); //PLL source is HSI
 8000176:	4b34      	ldr	r3, [pc, #208]	; (8000248 <main+0xd8>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a33      	ldr	r2, [pc, #204]	; (8000248 <main+0xd8>)
 800017c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000180:	6013      	str	r3, [r2, #0]
//	1011: PLL input clock x 13
//	1100: PLL input clock x 14
//	1101: PLL input clock x 15
//	1110: PLL input clock x 16
//	1111: PLL input clock x 16
	RCC_CFGR_REGISTER |= 0b0110<<18; // PLL * 8 = 32 MHz
 8000182:	4b31      	ldr	r3, [pc, #196]	; (8000248 <main+0xd8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a30      	ldr	r2, [pc, #192]	; (8000248 <main+0xd8>)
 8000188:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800018c:	6013      	str	r3, [r2, #0]
//	1011: SYSCLK divided by 16
//	1100: SYSCLK divided by 64
//	1101: SYSCLK divided by 128
//	1110: SYSCLK divided by 256
//	1111: SYSCLK divided by 512
	RCC_CFGR_REGISTER &= ~(1<<7); //AHB 32 MHz
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <main+0xd8>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a2d      	ldr	r2, [pc, #180]	; (8000248 <main+0xd8>)
 8000194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000198:	6013      	str	r3, [r2, #0]
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
	RCC_CFGR_REGISTER |= 0b100<<8; //APB1 16 MHz
 800019a:	4b2b      	ldr	r3, [pc, #172]	; (8000248 <main+0xd8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a2a      	ldr	r2, [pc, #168]	; (8000248 <main+0xd8>)
 80001a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001a4:	6013      	str	r3, [r2, #0]
//	0xx: HCLK not divided
//	100: HCLK divided by 2
//	101: HCLK divided by 4
//	110: HCLK divided by 8
//	111: HCLK divided by 16
	RCC_CFGR_REGISTER |=0b110<<11; //APB2 4 MHz
 80001a6:	4b28      	ldr	r3, [pc, #160]	; (8000248 <main+0xd8>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a27      	ldr	r2, [pc, #156]	; (8000248 <main+0xd8>)
 80001ac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80001b0:	6013      	str	r3, [r2, #0]
	//	Set and cleared by software to enable PLL.
	//	Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
	//	PLL clock is used as system clock or is selected to become the system clock.
	//	0: PLL OFF
	//	1: PLL ON
		RCC_CR_REGISTER |= 1<<24; //pll is on
 80001b2:	4b26      	ldr	r3, [pc, #152]	; (800024c <main+0xdc>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a25      	ldr	r2, [pc, #148]	; (800024c <main+0xdc>)
 80001b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001bc:	6013      	str	r3, [r2, #0]
//	System is enabled).
//	00: HSI selected as system clock
//	01: HSE selected as system clock
//	10: PLL selected as system clock
//	11: not allowed
	RCC_CFGR_REGISTER |= 0b10<<0; //PLL is selected
 80001be:	4b22      	ldr	r3, [pc, #136]	; (8000248 <main+0xd8>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a21      	ldr	r2, [pc, #132]	; (8000248 <main+0xd8>)
 80001c4:	f043 0302 	orr.w	r3, r3, #2
 80001c8:	6013      	str	r3, [r2, #0]

	//	Bit 2 IOPAEN: IO port A clock enable
	//	Set and cleared by software.
	//	0: IO port A clock disabled
	//	1: IO port A clock enabled
	RCC_APB2ENR_REGISTER |= 1<<2; //enabling the GPIOA Clock
 80001ca:	4b21      	ldr	r3, [pc, #132]	; (8000250 <main+0xe0>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a20      	ldr	r2, [pc, #128]	; (8000250 <main+0xe0>)
 80001d0:	f043 0304 	orr.w	r3, r3, #4
 80001d4:	6013      	str	r3, [r2, #0]




	GPIO_CRH_REGISTER |= 0b10<<20;//pin 13 is output
 80001d6:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <main+0xe4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a1e      	ldr	r2, [pc, #120]	; (8000254 <main+0xe4>)
 80001dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e0:	6013      	str	r3, [r2, #0]
	GPIO_CRH_REGISTER |= 0b10<<16;//pin 12 is output
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <main+0xe4>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a1b      	ldr	r2, [pc, #108]	; (8000254 <main+0xe4>)
 80001e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ec:	6013      	str	r3, [r2, #0]

	while(1)
	{
		//making pin set
		GPIO_ODR_REGISTER |= 1<<13;
 80001ee:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <main+0xe8>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a19      	ldr	r2, [pc, #100]	; (8000258 <main+0xe8>)
 80001f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001f8:	6013      	str	r3, [r2, #0]
		GPIO_ODR_REGISTER |= 1<<12;
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <main+0xe8>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a16      	ldr	r2, [pc, #88]	; (8000258 <main+0xe8>)
 8000200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000204:	6013      	str	r3, [r2, #0]
		for(i = 0; i<100000; i++);
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e002      	b.n	8000212 <main+0xa2>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a11      	ldr	r2, [pc, #68]	; (800025c <main+0xec>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d9f8      	bls.n	800020c <main+0x9c>
		GPIO_ODR_REGISTER &= ~(1<<13);
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <main+0xe8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <main+0xe8>)
 8000220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000224:	6013      	str	r3, [r2, #0]
		GPIO_ODR_REGISTER &= ~(1<<12);
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <main+0xe8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a0b      	ldr	r2, [pc, #44]	; (8000258 <main+0xe8>)
 800022c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000230:	6013      	str	r3, [r2, #0]
		for(i = 0; i<100000; i++);
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	e002      	b.n	800023e <main+0xce>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <main+0xec>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d9f8      	bls.n	8000238 <main+0xc8>
		GPIO_ODR_REGISTER |= 1<<13;
 8000246:	e7d2      	b.n	80001ee <main+0x7e>
 8000248:	40021004 	.word	0x40021004
 800024c:	40021000 	.word	0x40021000
 8000250:	40021018 	.word	0x40021018
 8000254:	40010804 	.word	0x40010804
 8000258:	4001080c 	.word	0x4001080c
 800025c:	0001869f 	.word	0x0001869f

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ff6d 	bl	8000170 <main>

08000296 <LoopForever>:

LoopForever:
    b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2500      	movs	r5, #0
 80002b8:	4e0c      	ldr	r6, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1ba4      	subs	r4, r4, r6
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a5      	cmp	r5, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2500      	movs	r5, #0
 80002ca:	4e0a      	ldr	r6, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1ba4      	subs	r4, r4, r6
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002dc:	4798      	blx	r3
 80002de:	3501      	adds	r5, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e6:	4798      	blx	r3
 80002e8:	3501      	adds	r5, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
